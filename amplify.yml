version: 1
frontend:
  phases:
    preBuild:
      commands:
        # Set Node.js version
        - nvm use 18
        - node -v
        # Ensure Yarn is being used
        - corepack enable
        - corepack prepare yarn@1.22.22 --activate
        # Prevent npm from being used
        - npm config set ignore-scripts true
        # Install dependencies with Yarn
        - yarn install --frozen-lockfile --prefer-offline
        # Generate Prisma Client
        - npx prisma generate
        # Debug: Print environment info
        - |
          echo "üîç DEBUG - Environment Source Check"
          echo "Process Environment:"
          printenv | sort
          echo "\nAWS Amplify Build Image Info:"
          cat /etc/os-release
          echo "\nüîë Database Configuration:"
          echo "Using Neo4j: $(test -n "$NEO4J_URI" && echo "Yes" || echo "No")"
          echo "Using Prisma: $(test -f prisma/schema.prisma && echo "Yes" || echo "No")"
    build:
      commands:
        # Export and verify environment variables
        - |
          echo "üîç Verifying AWS Amplify environment variables..."
          
          echo "\nüìã Build Environment Context:"
          echo "BUILD_ID=$BUILD_ID"
          echo "AWS_REGION=$AWS_REGION"
          echo "AWS_APP_ID=$AWS_APP_ID"
          
          echo "\nüîê Checking Secrets Access Method:"
          
          # Function to safely display variable info
          safe_var_info() {
            local var_name=$1
            local var_value=$2
            if [ -z "$var_value" ]; then
              echo "‚ùå $var_name: undefined"
            else
              local length=${#var_value}
              if [ $length -le 4 ]; then
                echo "‚úÖ $var_name: ****"
              else
                local first_two="${var_value:0:2}"
                local last_two="${var_value: -2}"
                echo "‚úÖ $var_name: $first_two...$last_two (length: $length)"
              fi
            fi
          }
          
          # Function to safely display URL domain
          safe_url_info() {
            local var_name=$1
            local var_value=$2
            if [ -z "$var_value" ]; then
              echo "‚ùå $var_name: undefined"
            else
              echo "‚úÖ $var_name: $(echo $var_value | sed -E 's/.*:\/\/([^/]+).*/\1/')"
            fi
          }
          
          echo "\nüìù Environment Variable Details:"
          safe_var_info "JWT_SECRET" "$JWT_SECRET"
          safe_url_info "NEO4J_URI" "$NEO4J_URI"
          safe_var_info "NEO4J_USER" "$NEO4J_USER"
          echo "‚úÖ NEO4J_PASSWORD: (length: ${#NEO4J_PASSWORD})"
          
          echo "\nüì§ Creating environment files..."
          
          # Access secrets using Amplify's secrets manager
          JWT_SECRET=$(printenv JWT_SECRET || echo "${JWT_SECRET}")
          NEO4J_URI=$(printenv NEO4J_URI || echo "${NEO4J_URI}")
          NEO4J_USER=$(printenv NEO4J_USER || echo "${NEO4J_USER}")
          NEO4J_PASSWORD=$(printenv NEO4J_PASSWORD || echo "${NEO4J_PASSWORD}")
          
          # Create runtime environment variables file
          cat << EOF > .env.production
          JWT_SECRET="${JWT_SECRET}"
          NEO4J_URI="${NEO4J_URI}"
          NEO4J_USER="${NEO4J_USER}"
          NEO4J_PASSWORD="${NEO4J_PASSWORD}"
          EOF
          
          # Create build-time environment variables file
          cat << EOF > .env
          NEXT_PUBLIC_API_URL="${NEXT_PUBLIC_API_URL}"
          JWT_SECRET="${JWT_SECRET}"
          NEO4J_URI="${NEO4J_URI}"
          NEO4J_USER="${NEO4J_USER}"
          NEO4J_PASSWORD="${NEO4J_PASSWORD}"
          EOF
          
          # Ensure environment variables are available during build
          export JWT_SECRET="${JWT_SECRET}"
          export NEO4J_URI="${NEO4J_URI}"
          export NEO4J_USER="${NEO4J_USER}"
          export NEO4J_PASSWORD="${NEO4J_PASSWORD}"
          
          echo "‚úÖ Environment files created"
          
          # Final verification
          if [ -z "$JWT_SECRET" ] || [ -z "$NEO4J_URI" ] || [ -z "$NEO4J_USER" ] || [ -z "$NEO4J_PASSWORD" ]; then
            echo "\n‚ùå Error: Missing required environment variables"
            exit 1
          fi
          
          echo "\n‚úÖ All environment variables verified. Starting build..."
        - yarn build
  artifacts:
    baseDirectory: .next
    files:
      - '**/*'
  cache:
    paths:
      - node_modules/**/*
      - .next/cache/**/*
  customHeaders:
    - pattern: '**/*'
      headers:
        - key: 'Strict-Transport-Security'
          value: 'max-age=31536000; includeSubDomains'
        - key: 'X-Frame-Options'
          value: 'SAMEORIGIN'
        - key: 'X-XSS-Protection'
          value: '1; mode=block'
    - pattern: '/api/auth/**/*'
      headers:
        - key: 'Cache-Control'
          value: 'no-store, max-age=0'
